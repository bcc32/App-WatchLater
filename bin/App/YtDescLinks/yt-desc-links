#!/usr/bin/env perl
use strict;
use warnings;

package App::YtDescLinks;

use feature qw(say switch);

use Getopt::Long qw(:config auto_help bundling);
use List::Util qw(any);
use Pod::Usage;
use URI::Find;

use App::YtDescLinks::API qw(api_key request_description_and_thumbnails);

use version; our $VERSION = version->declare('v1.0.0');

my %opts;

GetOptions(
    \%opts,
    'filter|f!',
    'api-key|k:s',
    'version|v',
) or pod2usage(2);

if ($opts{version}) {
    say "yt-desc-links version $VERSION";
    exit;
}

my $key = $opts{'api-key'} || $ENV{YT_API_KEY} or die 'no API key, aborting';
api_key $key;

while (my $video_id = <>) {
    chomp $video_id;
    $video_id =~ s/.*\bv=([a-zA-Z0-9_-]+).*/$1/;
    eval {
        my ($desc, $thumbnails) = request_description_and_thumbnails($video_id);
        next unless defined $desc;
        say $video_id;
        say biggest_thumbnail($thumbnails);
        say_uris($desc);
    };
    warn $@ if $@;
}

use constant FILTERS => (
    qr/pixiv/,
    qr/deviantart/,
    qr/imgur/,
    qr/zerochan/,
    qr/anime-pictures/,
);

sub should_print {
    return 1 unless $opts{filter};

    my ($uri) = @_;
    any { $uri =~ $_ } FILTERS;
}

sub say_uris {
    my ($text) = @_;
    my $finder = URI::Find->new(sub { say $_[1] if should_print $_[1] });
    $finder->find(\$text);
}

sub biggest_thumbnail {
    my ($href) = @_;
    my $maxw = 0;
    my $url;
    for my $thumb (values %$href) {
        if ($thumb->{width} > $maxw) {
            $maxw = $thumb->{width};
            $url = $thumb->{url};
        }
    }
    $url;
}

__END__

=head1 NAME

App::YtDescLinks - display links to thumbnail image and links from description

=head1 SYNOPSIS

    yt-desc-links [OPTION]...

    -f, --[no]filter   only display links from common image sites (e.g., pixiv)
    -k, --api-key KEY  set the YouTube Data API key
    --help             display this help message

=head1 DESCRIPTION

Accepts YouTube video IDs or watch URLs from stdin, and prints the ID, followed
by the thumbnail link, followed by description links, to stdout.

An API key is required to access the YouTube Data API. It may be specified on
the command line (C<-k>) or by environment variable (C<YT_API_KEY>).

=head1 AUTHOR

Aaron L. Zeng <me@bcc32.com>

=cut
