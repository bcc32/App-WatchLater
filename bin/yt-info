#!/usr/bin/env perl
use 5.016;
use warnings;
use autodie;

package App::YtDescLinks;

use Carp;
use Getopt::Long qw(:config auto_help bundling);
use List::Util qw(any);
use Pod::Usage;
use Text::CSV;
use Try::Tiny;
use URI::Find;

use API::YouTube;

my %opts;

GetOptions(
    \%opts,
    'version|v',
) or pod2usage(2);

if ($opts{version}) {
    say 'yt-info ' . API::YouTube->VERSION;
    exit;
}

my $api = API::YouTube->new(
    api_key      => $ENV{YT_API_KEY},
    access_token => $ENV{YT_ACCESS_TOKEN},
);

my $csv = Text::CSV->new({ eol => $/ });
$csv->column_names(qw(video_id video_title channel_id channel_title));

binmode STDOUT, ':encoding(UTF-8)';

my $regex = API::YouTube::VIDEO_ID_REGEX;

while (<>) {
    chomp;
    /^$regex$/ or carp "malformed video id '$_', skipping" and next;
    try {
        my $info = get_video_info($_);
        $csv->print_hr(*STDOUT, $info);
    } catch {
        print STDERR $_;
    };
}

sub get_video_info {
    my ($vid) = @_;
    my $snippet = $api->get_video($vid);
    return {
        channel_id    => $snippet->{channelId},
        channel_title => $snippet->{channelTitle},
        video_id      => $vid,
        video_title   => $snippet->{title},
    };
}

=head1 NAME

yt-info - display channel and video info

=head1 SYNOPSIS

    yt-info [OPTION]...

    --help     display this help message
    --version  display version info

=head1 DESCRIPTION

Accepts YouTube video IDs or watch URLs from stdin, and prints the following
information to stdout (as CSV-formatted rows):

=over 4

=item *

video ID

=item *

video title

=item *

channel ID

=item *

channel title

=back

An API key is required to access the YouTube Data API. Alternatively, requests
may be authorized by providing an OAuth2 access token.

=head1 ENVIRONMENT

=over 4

=item YT_API_KEY

Set the YouTube Data API key.

=item YT_ACCESS_TOKEN

Set the OAuth2 access token.

=back

=head1 AUTHOR

Aaron L. Zeng <me@bcc32.com>

=cut
