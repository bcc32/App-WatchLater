#!/usr/bin/env perl
use strict;
use warnings;

=head1 NAME

yt-desc-links - display links to thumbnail image and links from description

=head1 SYNOPSIS

    yt-desc-links [OPTION]...

    -f, --[no]filter  only display links from common image sites (e.g., pixiv)
    -k, --api-key     set the YouTube API key
    --help            display this help message

=head1 DESCRIPTION

Accepts YouTube video IDs or watch URLs from stdin, and prints the ID, followed
by the thumbnail link, followed by description links, to stdout.

An API key is required to access the YouTube Data API. It may be specified on
the command line (C<-k>) or by environment variable (C<YT_API_KEY>).

=head1 AUTHOR

Aaron L. Zeng <me@bcc32.com>

=cut

use feature qw(say switch);

use Getopt::Long qw(:config auto_help bundling);
use List::Util qw(any);
use Pod::Usage;
use URI::Escape;
use URI::Find;

my %opts;

GetOptions(\%opts,
    'filter|f!',
    'api-key|k:s',
) or pod2usage(2);

$opts{'api-key'} ||= $ENV{YT_API_KEY};
die 'no API key, aborting' unless $opts{'api-key'};

pod2usage(2) if @ARGV;

while (my $video_id = <STDIN>) {
    chomp $video_id;
    $video_id =~ s/.*watch\?v=([a-zA-Z0-9_-]+).*/$1/;
    my ($desc, $thumbnails) = request_description_and_thumbnails($video_id);
    next unless defined $desc;
    say $video_id;
    say biggest_thumbnail($thumbnails);
    say_uris($desc);
}

sub make_request {
    my ($method, $endpoint, $params) = @_;
    my $url = 'https://www.googleapis.com' . $endpoint;
    my $query = '';

    my %params = %$params;
    $params{key} = $opts{'api-key'};

    for my $key (keys %params) {
        my $val = $params{$key};
        $query .= '&' . uri_escape($key) . '=' . uri_escape($val);
    }

    $query =~ s/^./?/;
    $url .= $query;

    open my $fh, "curl -sS -X $method \"$url\" |";
    undef local $/;
    <$fh>;
}

sub request_description_and_thumbnails {
    use JSON;
    my ($video_id) = @_;
    my $json = make_request('GET', '/youtube/v3/videos', {
        id => $video_id,
        part => 'snippet',
    });
    my $obj = decode_json($json);
    my $item = $obj->{items}[0];
    unless (defined $item) {
        warn "couldn't find video with id $video_id, skipping";
        return;
    }
    $item->{snippet}{description}, $item->{snippet}{thumbnails};
}

use constant FILTERS => (
    qr/pixiv/,
    qr/deviantart/,
    qr/imgur/,
    qr/zerochan/,
    qr/anime-pictures/,
);

sub should_print {
    return 1 unless $opts{filter};

    my ($uri) = @_;
    any { $uri =~ $_ } FILTERS;
}

sub say_uri {
    my ($uri) = $_[0];
    say $uri if should_print $uri;

    $uri;
}

sub say_uris {
    my ($text) = @_;
    my $finder = URI::Find->new(\&say_uri);
    $finder->find(\$text);
}

sub biggest_thumbnail {
    my ($href) = @_;
    my $maxw = 0;
    my $url;
    for my $thumb (values %$href) {
        if ($thumb->{width} > $maxw) {
            $maxw = $thumb->{width};
            $url = $thumb->{url};
        }
    }
    $url;
}
